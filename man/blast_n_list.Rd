% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blast.R
\name{blast_n_list}
\alias{blast_n_list}
\title{Run blastn on all fasta files in a folder.}
\usage{
blast_n_list(
  fasta_folder,
  fasta_pattern,
  database_path,
  out_ext = "tsv",
  outfmt = "6",
  other_args = NULL,
  overwrite = FALSE,
  echo = FALSE,
  get_hash = TRUE,
  ...
)
}
\arguments{
\item{fasta_folder}{Path to the folder containing fasta files to BLAST.}

\item{fasta_pattern}{Optional; pattern used for matching with grep. Only
files with names matching the pattern will be included in the
BLAST search.}

\item{database_path}{Path to the BLAST database, including the database
name.}

\item{out_ext}{File extension used for BLAST results files. The result of
each BLAST search will be a file with the same name as the input fasta files,
but with this extension appended.}

\item{outfmt}{String; format to use for BLAST output. See
https://www.ncbi.nlm.nih.gov/books/NBK279684/ (Table C1) for details.}

\item{other_args}{Character vector; other arguments to pass on to
\code{blastn}. For a list of options, run \code{blastn -help}.}

\item{overwrite}{Logical: should old output be erased before running this
function? "Old output" will be determined by matching any file names with
`out_ext`.}

\item{echo}{Logical; should standard error and output be printed?}

\item{get_hash}{Logical; if TRUE, the MD5 hash of the output will be
returned.}

\item{...}{Additional other arguments. Not used by this function,
but meant to be used by \code{\link[drake]{drake_plan}} for tracking
during workflows.}
}
\value{
NULL or character vector if `get_hash` is TRUE.
Externally, a text file file with the results of the blastn
search, named by adding `out_ext` to each input fasta file name.
}
\description{
Output is written to the same folder containing the input files.
}
\examples{
library(ape)

# Make temp dir for storing files
temp_dir <- fs::dir_create(fs::path(tempdir(), "baitfindR_example"))

# Write out ape::woodmouse dataset as DNA
data(woodmouse)
ape::write.FASTA(woodmouse, fs::path(temp_dir, "woodmouse.fasta"))
ape::write.FASTA(woodmouse, fs::path(temp_dir, "woodmouse2.fasta"))

# Make blast database
build_blast_db(
  fs::path(temp_dir, "woodmouse.fasta"),
  db_type = "nucl",
  out_name = "wood",
  parse_seqids = TRUE,
  wd = temp_dir)

# Blast the original sequences against the database
blast_n_list(
  fasta_folder = temp_dir,
  fasta_pattern = "fasta",
  database_path = fs::path(temp_dir, "wood")
)

# Take a look at the results.
readr::read_tsv(
  fs::path(temp_dir, "woodmouse.tsv"),
  col_names = FALSE
  )

readr::read_tsv(
  fs::path(temp_dir, "woodmouse2.tsv"),
  col_names = FALSE
  )

# Cleanup.
fs::file_delete(temp_dir)
}
\references{
\url{https://www.ncbi.nlm.nih.gov/books/NBK279690/}
}
\author{
Joel H Nitta, \email{joelnitta@gmail.com}
}
